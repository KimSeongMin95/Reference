[===== UE4 Console Command 모음 =====]
    - Display
        DisplayAll ClassName VariableName : 화면에 해당 클래스의 모든 객체들의 변수 값 띄우기
        Set ClassName VariableName Value : 변수 값 런타임에서 수정하기
        Display ClassObjectName VariableName : 하나의 객체의 변수 값을 런타임에 수정하기
        Set ClassName VariableName : 해당 클래스의 변수의 값을 변경 (PIE 불가능)
    - show
        show collision : 화면에 collision 표시
    - showdebug
        커스텀
    - stat (https://docs.unrealengine.com/4.27/ko/TestingAndOptimization/PerformanceAndProfiling/StatCommands/)
        stat unit
        stat fps
    - gc.ForceCollectGarbageEveryFrame 1
    - ToggleDebugCamera
        카메라를 자유롭게 제어합니다.
    

[===== UE4 Non Uinity Build 설정 방법 =====]
    - 1. BuildConfigureation.xml 수정
        <?xml version="1.0" encoding="utf-8" ?><Configuration xmlns="https://www.unrealengine.com/BuildConfiguration">
            <BuildConfiguration>
                <bUseUnityBuild>false</bUseUnityBuild>
                <bUsePCHFiles>false</bUsePCHFiles>
            </BuildConfiguration>
        </Configuration>

    - 2. MyProjectEditor.Target.cs 수정
        public class MyProjectTarget : TargetRules
        {
            public MyProjectTarget(TargetInfo Target) : base(Target)
            {
                Type = TargetType.Game;

                bUseUnityBuild = false;
                bUsePCHFiles = false;
            }
        }


[===== UE4 빌드 프로세서 개수 조절하는 방법 =====]
    - 경로
        C:\Users\ID\AppData\Roaming\Unreal Engine\UnrealBuildTool\BuildConfiguration.xml

    - BuildConfiguration.xml 파일에 다음과 같이 적어놓습니다.
        <xml version="1.0" encoding="utf-8" ?>
        <Configuration xmlns="https://www.unrealengine.com/BuildConfiguration">
            <BUildConfiguration>
            </BuildConfiguration>
            <LocalExecutor>
                <ProcessCountMultiplier>1</ProcessCountMultiplier>
                <MaxProcessorCount>12</MaxProcessorCount>
            </LocalExecutor>
            <ParallelExecutor>
                <ProcessCountMultiplier>1</ProcessCountMultiplier>
                <MaxProcessorCount>12</MaxProcessorCount>
            </ParallelExecutor>
        </Configuration>
        그러면 12개의 프로세스만 사용합니다.


[===== Within 클래스 메타지정자 =====]
    Whitin 클래스 메타지정자가 설정되면 해당 클래스의 멤버 변수로만 상요될 수 있습니다.
    다른 곳에서 사용하면 에러가 발생합니다.
    GetOuwer##ClassName()->Cast하지 않아도 바로 가져올 수 있습니다.


[===== ObjectMacros.h =====]
    RTTI를 자동으로 언리얼 빌드 툴이 구현해줍니다.


[===== LiveCoding.Compoile 콘솔 커맨드 =====]
    cpp만 간단히 수정하는 경우에는 LiveCoding.Compoile 콘솔 커맨드를 이용해서 게임 실행 중 컴파일하고 다시 DLL을 로딩해주는 기능을 이용하여 시간을 단축할 수 있습니다.
    PIE가 아닐 때도 가능합니다.


[===== Develop Editor 빌드 시 에디터 띄우지 않고 클라이언트 띄우는 방법 =====]
    Visual Studio -> 디버그 -> 명령 인수
    "(SolutionDir).MyProjectName.uproject" -skipcompile -game -log -windowed -resx=1280 -resy=720 -MyProjectNameGameMode=Client


[===== 액터의 수명 주기 =====]
    (출처: https://docs.unrealengine.com/4.27/ko/ProgrammingAndScripting/ProgrammingWithCPP/UnrealArchitecture/Actors/ActorLifecycle/)

    <디스크에서 로드>
        1. Load From Disk
            패키지/레벨에 있는 액터가 디스크에서 로드됩니다.
        2. UObject::PostLoad (virtual)
            디스크에서의 로드 완료 후 serialize된 액터에 의해 호출됩니다.
            커스텀 버전이나 픽스 작업을 진행할 수 있습니다.
                (여기서 deprecated된 멤버 변수를 정리할 수 있습니다.)
            UObject::PostLoad는 AActor::PostActorCreated와 상호 배제됩니다.
        3. UWorld::InitializeActorsForPlay
            플레이용 액터 초기화
        4. ULevel::RouteActorInitialize
            액터 초기화 경로변경 - 초기화되지 않은 액터에 대해 호출됩니다
            4.1. AActor::PreInitializeComponents (virtual)
                컴포넌트 초기화 이전 - 액터의 컴포넌트에 InitializeComponent 를 호출하기 전 호출합니다.
            4.2. AActor::InitializeComponents
                컴포넌트 초기화 - 액터에 정의된 각 컴포넌트 생성용 헬퍼 함수입니다.
            4.3. AActor::PostInitializeComponents (virtual)
                컴포넌트 초기화 이후 - 액터의 컴포넌트 초기화 완료 후 호출됩니다.
        5. AActor::BeginPlay (virtual)
            플레이 시작 - 레벨이 시작되면 호출됩니다.
        6. AActor::Tick (virtual)
        7. AActor::EndPlay (virtual)
            액터의 수명이 막바지에 다다랐음을 보증하기 위해 여러 곳에서 호출됩니다. 
            플레이 도중에는 Destroy (소멸)이나, Level Transition (레벨 전환)이나, 
            액터가 들어있는 스트리밍 레벨이 언로드되면 이 함수가 발동됩니다.
            - EndPlay가 호출되는 경우
                Destroy 명시적 호출
                에디터에서 플레이 종료
                Level Transition (심리스 트래블 또는 맵 로드)
                액터가 들어있는 스트리밍 레벨 언로드
                액터의 수명 만료
                어플리케이션 종료 (모든 액터 소멸)
        8. RF_PendingKill
        9. ULevel::Actors에서 제거
        10. Next GC에서 할당 해제
            오브젝트가 소멸 마킹된 이후에는, 가비지 컬렉션이 일어날 때 메모리에서 실제로 제거되어 사용중이던 리소스가 해제됩니다.
            오브젝트의 소멸 도중 호출되는 함수는 다음과 같습니다:
            10.1. UWorld::BeginDestroy (virtual)
                소멸 시작 - 여기서 오브젝트의 메모리를 해제하고 기타 (그래픽 스레드 프록시 오브젝트 등의) 멀티스레드 리소스 처리를 할 수 있습니다. 
                소멸 예정 관련 대부분의 게임플레이 함수성은 더욱 일찍 EndPlay 에서 처리되었을 것입니다.
            10.2. UWorld::IsReadyForFinishDestroy (virtual)
                소멸 마무리 준비 여부 - 가비지 컬렉션 프로세스는 이 함수를 호출하여 오브젝트 할당을 영구히 해제할 준비가 되었는지 여부를 결정합니다. 
                false 를 반환하면, 이 함수는 다음 가비지 컬렉션 패스까지 실제 오브젝트 소멸 작업을 유예시킵니다.
            10.3. UWorld::FinishDestroy (virtual)
                소멸 마무리 - 오브젝트가 곧 소멸되므로, 내부 데이터 구조체를 해제시킬 마지막 기회입니다. 
                메모리 해제 이전 마지막 호출입니다.

    <에디터에서 플레이>
        1. 에디터에 있는 액터를 새 월드로 복제합니다.
        2. UObejct::PostDuplicate (virtual)
        3. UWorld::InitializeActorsForPlay
            플레이용 액터 초기화
        4. ULevel::RouteActorInitialize
            액터 초기화 경로변경 - 초기화되지 않은 액터에 대해 호출됩니다
            4.1. AActor::PreInitializeComponents (virtual)
                컴포넌트 초기화 이전 - 액터의 컴포넌트에 InitializeComponent 를 호출하기 전 호출합니다.
            4.2. AActor::InitializeComponents
                컴포넌트 초기화 - 액터에 정의된 각 컴포넌트 생성용 헬퍼 함수입니다.
            4.3. AActor::PostInitializeComponents (virtual)
                컴포넌트 초기화 이후 - 액터의 컴포넌트 초기화 완료 후 호출됩니다.
        5. AActor::BeginPlay (virtual)
            플레이 시작 - 레벨이 시작되면 호출됩니다.
        6. AActor::Tick (virtual)
        7. AActor::EndPlay (virtual)
            액터의 수명이 막바지에 다다랐음을 보증하기 위해 여러 곳에서 호출됩니다. 
            플레이 도중에는 Destroy (소멸)이나, Level Transition (레벨 전환)이나, 
            액터가 들어있는 스트리밍 레벨이 언로드되면 이 함수가 발동됩니다.
            - EndPlay가 호출되는 경우
                Destroy 명시적 호출
                에디터에서 플레이 종료
                Level Transition (심리스 트래블 또는 맵 로드)
                액터가 들어있는 스트리밍 레벨 언로드
                액터의 수명 만료
                어플리케이션 종료 (모든 액터 소멸)
        8. RF_PendingKill
        9. ULevel::Actors에서 제거
        10. Next GC에서 할당 해제
            오브젝트가 소멸 마킹된 이후에는, 가비지 컬렉션이 일어날 때 메모리에서 실제로 제거되어 사용중이던 리소스가 해제됩니다.
            오브젝트의 소멸 도중 호출되는 함수는 다음과 같습니다:
            10.1. UWorld::BeginDestroy (virtual)
                소멸 시작 - 여기서 오브젝트의 메모리를 해제하고 기타 (그래픽 스레드 프록시 오브젝트 등의) 멀티스레드 리소스 처리를 할 수 있습니다. 
                소멸 예정 관련 대부분의 게임플레이 함수성은 더욱 일찍 EndPlay 에서 처리되었을 것입니다.
            10.2. UWorld::IsReadyForFinishDestroy (virtual)
                소멸 마무리 준비 여부 - 가비지 컬렉션 프로세스는 이 함수를 호출하여 오브젝트 할당을 영구히 해제할 준비가 되었는지 여부를 결정합니다. 
                false 를 반환하면, 이 함수는 다음 가비지 컬렉션 패스까지 실제 오브젝트 소멸 작업을 유예시킵니다.
            10.3. UWorld::FinishDestroy (virtual)
                소멸 마무리 - 오브젝트가 곧 소멸되므로, 내부 데이터 구조체를 해제시킬 마지막 기회입니다. 
                메모리 해제 이전 마지막 호출입니다.

    <스폰>
        1. UWorld::SpawnActor
        2. AActor::PostSpawnInitialize
        3. AActor::PostActorCreated (virtual)
            스폰된 액터의 생성 이후에 호출됩니다.
            생성자같은 것이 여기에 와야 합니다.
            PostActorCreated (액터 생성 이후)는 PostLoad (로드 이후)와 상호 배제적입니다.
        4. AActor::ExecuteConstruction
            AActor::OnConstruction (virtual)
                생성시 - 액터의 생성 지점으로, 블루프린트 액터가 컴포넌트를 만들고 블루프린트 변수를 초기화시키는 곳입니다.
        5. AActor::PostActorConstruction 
            액터 초기화 경로변경 - 초기화되지 않은 액터에 대해 호출됩니다
            5.1. AActor::PreInitializeComponents (virtual)
                컴포넌트 초기화 이전 - 액터의 컴포넌트에 InitializeComponent 를 호출하기 전 호출합니다.
            5.2. AActor::InitializeComponents
                컴포넌트 초기화 - 액터에 정의된 각 컴포넌트 생성용 헬퍼 함수입니다.
            5.3. AActor::PostInitializeComponents (virtual)
                컴포넌트 초기화 이후 - 액터의 컴포넌트 초기화 완료 후 호출됩니다.
        6. FOnActorSpawned::OnActorSpawned
            UWorld 에 방송됩니다.
        7. AActor::BeginPlay (virtual)
            플레이 시작 - 레벨이 시작되면 호출됩니다.
        8. AActor::Tick (virtual)
        9. AActor::EndPlay (virtual)
            액터의 수명이 막바지에 다다랐음을 보증하기 위해 여러 곳에서 호출됩니다. 
            플레이 도중에는 Destroy (소멸)이나, Level Transition (레벨 전환)이나, 
            액터가 들어있는 스트리밍 레벨이 언로드되면 이 함수가 발동됩니다.
            - EndPlay가 호출되는 경우
                Destroy 명시적 호출
                에디터에서 플레이 종료
                Level Transition (심리스 트래블 또는 맵 로드)
                액터가 들어있는 스트리밍 레벨 언로드
                액터의 수명 만료
                어플리케이션 종료 (모든 액터 소멸)
        10. RF_PendingKill
        11. ULevel::Actors에서 제거
        12. Next GC에서 할당 해제
            오브젝트가 소멸 마킹된 이후에는, 가비지 컬렉션이 일어날 때 메모리에서 실제로 제거되어 사용중이던 리소스가 해제됩니다.
            오브젝트의 소멸 도중 호출되는 함수는 다음과 같습니다:
            10.1. UWorld::BeginDestroy (virtual)
                소멸 시작 - 여기서 오브젝트의 메모리를 해제하고 기타 (그래픽 스레드 프록시 오브젝트 등의) 멀티스레드 리소스 처리를 할 수 있습니다. 
                소멸 예정 관련 대부분의 게임플레이 함수성은 더욱 일찍 EndPlay 에서 처리되었을 것입니다.
            10.2. UWorld::IsReadyForFinishDestroy (virtual)
                소멸 마무리 준비 여부 - 가비지 컬렉션 프로세스는 이 함수를 호출하여 오브젝트 할당을 영구히 해제할 준비가 되었는지 여부를 결정합니다. 
                false 를 반환하면, 이 함수는 다음 가비지 컬렉션 패스까지 실제 오브젝트 소멸 작업을 유예시킵니다.
            10.3. UWorld::FinishDestroy (virtual)
                소멸 마무리 - 오브젝트가 곧 소멸되므로, 내부 데이터 구조체를 해제시킬 마지막 기회입니다. 
                메모리 해제 이전 마지막 호출입니다.

    <디퍼드 스폰>
        1. UWorld::SpawnActorDeferred
            액터 디퍼드 스폰 - 액터의 절차적 생성을 뜻하는 것으로, 블루프린트 컨스트럭션 스크립트 이전 추가적인 구성이 가능합니다.
        2. AActor::PostSpawnInitialize
        3. AActor::PostActorCreated (virtual)
            스폰된 액터의 생성 이후에 호출됩니다.
            생성자같은 것이 여기에 와야 합니다.
            PostActorCreated (액터 생성 이후)는 PostLoad (로드 이후)와 상호 배제적입니다.
        4. UGameplayStatics::FinishSpawningActor
            액터 스폰 마무리 - 액터를 마무리시키기 위해 호출되며, SpawnActor (액터 스폰) 줄의 ExecuteConstruction (생성 실행)을 집어듭니다.
        5. AActor::ExecuteConstruction
            AActor::OnConstruction (virtual)
                생성시 - 액터의 생성 지점으로, 블루프린트 액터가 컴포넌트를 만들고 블루프린트 변수를 초기화시키는 곳입니다.
        6. AActor::PostActorConstruction 
            액터 초기화 경로변경 - 초기화되지 않은 액터에 대해 호출됩니다
            5.1. AActor::PreInitializeComponents (virtual)
                컴포넌트 초기화 이전 - 액터의 컴포넌트에 InitializeComponent 를 호출하기 전 호출합니다.
            5.2. AActor::InitializeComponents
                컴포넌트 초기화 - 액터에 정의된 각 컴포넌트 생성용 헬퍼 함수입니다.
            5.3. AActor::PostInitializeComponents (virtual)
                컴포넌트 초기화 이후 - 액터의 컴포넌트 초기화 완료 후 호출됩니다.
        7. FOnActorSpawned::OnActorSpawned
            UWorld 에 방송됩니다.
        8. AActor::BeginPlay (virtual)
            플레이 시작 - 레벨이 시작되면 호출됩니다.
        9. AActor::Tick (virtual)
        10. AActor::EndPlay (virtual)
            액터의 수명이 막바지에 다다랐음을 보증하기 위해 여러 곳에서 호출됩니다. 
            플레이 도중에는 Destroy (소멸)이나, Level Transition (레벨 전환)이나, 
            액터가 들어있는 스트리밍 레벨이 언로드되면 이 함수가 발동됩니다.
            - EndPlay가 호출되는 경우
                Destroy 명시적 호출
                에디터에서 플레이 종료
                Level Transition (심리스 트래블 또는 맵 로드)
                액터가 들어있는 스트리밍 레벨 언로드
                액터의 수명 만료
                어플리케이션 종료 (모든 액터 소멸)
        11. RF_PendingKill
        12. ULevel::Actors에서 제거
        13. Next GC에서 할당 해제
            오브젝트가 소멸 마킹된 이후에는, 가비지 컬렉션이 일어날 때 메모리에서 실제로 제거되어 사용중이던 리소스가 해제됩니다.
            오브젝트의 소멸 도중 호출되는 함수는 다음과 같습니다:
            13.1. UWorld::BeginDestroy (virtual)
                소멸 시작 - 여기서 오브젝트의 메모리를 해제하고 기타 (그래픽 스레드 프록시 오브젝트 등의) 멀티스레드 리소스 처리를 할 수 있습니다. 
                소멸 예정 관련 대부분의 게임플레이 함수성은 더욱 일찍 EndPlay 에서 처리되었을 것입니다.
            13.2. UWorld::IsReadyForFinishDestroy (virtual)
                소멸 마무리 준비 여부 - 가비지 컬렉션 프로세스는 이 함수를 호출하여 오브젝트 할당을 영구히 해제할 준비가 되었는지 여부를 결정합니다. 
                false 를 반환하면, 이 함수는 다음 가비지 컬렉션 패스까지 실제 오브젝트 소멸 작업을 유예시킵니다.
            13.3. UWorld::FinishDestroy (virtual)
                소멸 마무리 - 오브젝트가 곧 소멸되므로, 내부 데이터 구조체를 해제시킬 마지막 기회입니다. 
                메모리 해제 이전 마지막 호출입니다.

    - 참고
    UObject::PostInitProperties (virtual)
        오브젝트의 프로퍼티가 초기화 될때 호출되는 함수
    UObject::PostEditChangeProperty (virtual)
        프로퍼티가 수정 될때 호출되는 함수


[===== Serialization(직렬화) =====]
    참고
        https://mm5-gnap.tistory.com/359
        https://lifeisforu.tistory.com/360

